- name: Include vars for namespace, cpu and memory vars
  include_vars: roles/vm_provision/vars/url_vars.yml

- name: Get ResourceQuota in the namespace
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ResourceQuota
    namespace: "{{ namespace | trim }}"
  register: quota_info

- name: Fail if no ResourceQuota found
  fail:
    msg: "No ResourceQuota found in namespace {{ namespace }}"
  when: quota_info.resources | length == 0

- name: Set quota facts (cast to float)
  set_fact:
    quota_hard_cpu: "{{ quota_info.resources[0].status.hard['limits.cpu'] | float }}"
    quota_used_cpu: "{{ quota_info.resources[0].status.used['limits.cpu'] | float }}"
    quota_hard_memory: "{{ quota_info.resources[0].status.hard['limits.memory'] }}"
    quota_used_memory: "{{ quota_info.resources[0].status.used['limits.memory'] }}"

- name: Set available CPU
  set_fact:
    quota_available_cpu: "{{ quota_hard_cpu - quota_used_cpu }}"

- name: Convert memory to Mi and calculate available memory
  set_fact:
    quota_available_memory_mi: >-
      {% set hard = quota_hard_memory[:-2] | float %}
      {% set used = quota_used_memory[:-2] | float %}
      {% set unit = quota_hard_memory[-2:] %}
      {% if unit == 'Gi' %}
        {{ (hard - used) * 1024 }}
      {% elif unit == 'Mi' %}
        {{ hard - used }}
      {% else %}
        {{ 0 }}
      {% endif %}

- name: Check resource feasibility
  fail:
    msg: >-
      Resource request exceeds quota.
      Requested: {{ cpu_count }} CPUs, {{ memory }}Gi memory.
      Available: {{ quota_available_cpu }} CPUs, {{ quota_available_memory_mi }} Mi memory.
  when: >
    (cpu_count | float) > quota_available_cpu
    or
    (memory | float) * 1024 > quota_available_memory_mi

- name: Debug - Resources are within quota
  debug:
    msg: "Requested resources are within available quota."
