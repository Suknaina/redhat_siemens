- name: Include vars for namespace, cpu and memory vars
  include_vars: roles/vm_provision/vars/url_vars.yml

- name: Get ResourceQuota in the namespace
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ResourceQuota
    namespace: "{{ namespace | trim }}"
  register: quota_info

- name: Fail if no ResourceQuota found
  fail:
    msg: "No ResourceQuota found in namespace {{ namespace }}"
  when: quota_info.resources | length == 0

- name: Calculate available CPU and Memory (in Mi)
  set_fact:
    quota_available_cpu: "{{ (quota_info.resources[0].status.hard['limits.cpu'] | float) - (quota_info.resources[0].status.used['limits.cpu'] | float) }}"
    quota_available_memory_mi: >-
      {% set hard_mem = quota_info.resources[0].status.hard['limits.memory'] %}
      {% set used_mem = quota_info.resources[0].status.used['limits.memory'] %}
      {% set hard_val = hard_mem[:-2] | float %}
      {% set used_val = used_mem[:-2] | float %}
      {% set unit = hard_mem[-2:] %}
      {% if unit == 'Gi' %}
        {{ (hard_val - used_val) * 1024 }}
      {% elif unit == 'Mi' %}
        {{ hard_val - used_val }}
      {% else %}
        0
      {% endif %}

- name: Fail if requested resources exceed quota
  fail:
    msg: >-
      Resource request exceeds quota.
      Requested: {{ cpu_count }} CPUs, {{ memory }}Gi memory.
      Available: {{ quota_available_cpu }} CPUs, {{ quota_available_memory_mi }} Mi memory.
  when: >
    (cpu_count | float) > (quota_available_cpu | float)
    or
    ((memory | float) * 1024) > (quota_available_memory_mi | float)

- name: Debug - Resources are within quota
  debug:
    msg: "Requested resources are within available quota."
